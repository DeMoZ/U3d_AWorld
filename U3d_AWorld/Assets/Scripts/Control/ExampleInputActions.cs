//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/ExampleInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ExampleInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ExampleInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ExampleInputActions"",
    ""maps"": [
        {
            ""name"": ""ExampleMap"",
            ""id"": ""cc549c9b-aca4-45fe-987e-9ddda6185660"",
            ""actions"": [
                {
                    ""name"": ""PlayerMovement"",
                    ""type"": ""Value"",
                    ""id"": ""115f5d01-b4bd-4801-85ff-34efb1748b36"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PlayerJump"",
                    ""type"": ""Button"",
                    ""id"": ""2acfb164-65bb-42a6-b94e-1beda7286a5f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""35b8e477-7442-4799-8e80-1e611113654e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""60e8cf62-aba6-484a-85a9-be2d96bd07d4"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3cad5dd4-db26-41cf-8570-51f8c72aff2e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""05a1d45e-0366-4f11-a76f-df8f894caea2"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""23625068-6e48-4d74-9f5f-ba83e7d1e839"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""ARROWS"",
                    ""id"": ""d5ddba2a-6630-48a6-af18-c7cf0fcae765"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d1d633be-2cd1-4b16-8489-6b44855dc4d0"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""54f61955-5f0e-4e66-8d11-ee566911e63d"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""2a915c88-2978-41e5-aa16-99096a0d8022"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""4fc10393-e27d-4de5-92a8-0e7af670aa1c"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ec7be336-9da2-40da-a82c-d02932eeeba4"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerJump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ExampleMap
        m_ExampleMap = asset.FindActionMap("ExampleMap", throwIfNotFound: true);
        m_ExampleMap_PlayerMovement = m_ExampleMap.FindAction("PlayerMovement", throwIfNotFound: true);
        m_ExampleMap_PlayerJump = m_ExampleMap.FindAction("PlayerJump", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ExampleMap
    private readonly InputActionMap m_ExampleMap;
    private List<IExampleMapActions> m_ExampleMapActionsCallbackInterfaces = new List<IExampleMapActions>();
    private readonly InputAction m_ExampleMap_PlayerMovement;
    private readonly InputAction m_ExampleMap_PlayerJump;
    public struct ExampleMapActions
    {
        private @ExampleInputActions m_Wrapper;
        public ExampleMapActions(@ExampleInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @PlayerMovement => m_Wrapper.m_ExampleMap_PlayerMovement;
        public InputAction @PlayerJump => m_Wrapper.m_ExampleMap_PlayerJump;
        public InputActionMap Get() { return m_Wrapper.m_ExampleMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ExampleMapActions set) { return set.Get(); }
        public void AddCallbacks(IExampleMapActions instance)
        {
            if (instance == null || m_Wrapper.m_ExampleMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ExampleMapActionsCallbackInterfaces.Add(instance);
            @PlayerMovement.started += instance.OnPlayerMovement;
            @PlayerMovement.performed += instance.OnPlayerMovement;
            @PlayerMovement.canceled += instance.OnPlayerMovement;
            @PlayerJump.started += instance.OnPlayerJump;
            @PlayerJump.performed += instance.OnPlayerJump;
            @PlayerJump.canceled += instance.OnPlayerJump;
        }

        private void UnregisterCallbacks(IExampleMapActions instance)
        {
            @PlayerMovement.started -= instance.OnPlayerMovement;
            @PlayerMovement.performed -= instance.OnPlayerMovement;
            @PlayerMovement.canceled -= instance.OnPlayerMovement;
            @PlayerJump.started -= instance.OnPlayerJump;
            @PlayerJump.performed -= instance.OnPlayerJump;
            @PlayerJump.canceled -= instance.OnPlayerJump;
        }

        public void RemoveCallbacks(IExampleMapActions instance)
        {
            if (m_Wrapper.m_ExampleMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IExampleMapActions instance)
        {
            foreach (var item in m_Wrapper.m_ExampleMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ExampleMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ExampleMapActions @ExampleMap => new ExampleMapActions(this);
    public interface IExampleMapActions
    {
        void OnPlayerMovement(InputAction.CallbackContext context);
        void OnPlayerJump(InputAction.CallbackContext context);
    }
}
